[0.313s] Invoking command in '/home/jw/robot/ros_ws/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake /home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/jw/robot/ros_ws/install/ydlidar_ros2_driver
[0.334s] -- Found ament_cmake: 1.1.5 (/opt/ros/galactic/share/ament_cmake/cmake)
[0.353s] -- Using PYTHON_EXECUTABLE: /usr/bin/python3
[0.439s] -- Found rclcpp: 9.2.1 (/opt/ros/galactic/share/rclcpp/cmake)
[0.508s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[0.510s] -- Found rosidl_adapter: 2.2.2 (/opt/ros/galactic/share/rosidl_adapter/cmake)
[0.697s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[0.789s] -- Found rmw_implementation_cmake: 3.3.1 (/opt/ros/galactic/share/rmw_implementation_cmake/cmake)
[0.796s] -- Found rmw_fastrtps_cpp: 5.0.2 (/opt/ros/galactic/share/rmw_fastrtps_cpp/cmake)
[1.006s] -- Using RMW implementation 'rmw_fastrtps_cpp' as default
[1.265s] -- Found sensor_msgs: 2.2.4 (/opt/ros/galactic/share/sensor_msgs/cmake)
[1.499s] -- Found visualization_msgs: 2.2.4 (/opt/ros/galactic/share/visualization_msgs/cmake)
[1.638s] -- Found std_srvs: 2.2.4 (/opt/ros/galactic/share/std_srvs/cmake)
[1.665s] -- Found ament_lint_auto: 0.10.7 (/opt/ros/galactic/share/ament_lint_auto/cmake)
[1.788s] -- Added test 'copyright' to check source files copyright and LICENSE
[1.790s] -- Added test 'cppcheck' to perform static code analysis on C / C++ code
[1.791s] -- Configured cppcheck include dirs: /home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src
[1.791s] -- Configured cppcheck exclude dirs and/or files: 
[1.794s] -- Added test 'cpplint' to check C / C++ code against the Google style
[1.794s] -- Configured cpplint exclude dirs and/or files: 
[1.795s] -- Added test 'flake8' to check Python code syntax and style conventions
[1.796s] -- Added test 'lint_cmake' to check CMake code style
[1.797s] -- Added test 'pep257' to check Python code against some of the style conventions in PEP 257
[1.800s] -- Added test 'uncrustify' to check C / C++ code style
[1.802s] -- Configured uncrustify additional arguments: 
[1.802s] -- Added test 'xmllint' to check XML markup files
[1.807s] -- Configuring done
[1.838s] -- Generating done
[1.841s] -- Build files have been written to: /home/jw/robot/ros_ws/build/ydlidar_ros2_driver
[1.854s] Invoked command in '/home/jw/robot/ros_ws/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake /home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/jw/robot/ros_ws/install/ydlidar_ros2_driver
[1.859s] Invoking command in '/home/jw/robot/ros_ws/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --build /home/jw/robot/ros_ws/build/ydlidar_ros2_driver -- -j12 -l12
[1.920s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_client[0m
[1.920s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_node[0m
[1.992s] [ 25%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_client.dir/src/ydlidar_ros2_driver_client.cpp.o[0m
[1.995s] [ 50%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_node.dir/src/ydlidar_ros2_driver_node.cpp.o[0m
[4.914s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[4.915s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:44:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.915s]    44 |   node->declare_parameter("port"[01;35m[K)[m[K;
[4.916s]       |                                 [01;35m[K^[m[K
[4.916s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.916s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.917s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.917s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.917s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.918s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.918s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.918s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:51:41:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.919s]    51 |   node->declare_parameter("ignore_array"[01;35m[K)[m[K;
[4.919s]       |                                         [01;35m[K^[m[K
[4.919s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.920s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.920s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.920s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.921s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.921s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.921s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.922s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:56:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.922s]    56 |   node->declare_parameter("frame_id"[01;35m[K)[m[K;
[4.923s]       |                                     [01;35m[K^[m[K
[4.923s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.924s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.924s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.924s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.925s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.925s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.925s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.926s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:62:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.926s]    62 |   node->declare_parameter("baudrate"[01;35m[K)[m[K;
[4.926s]       |                                     [01;35m[K^[m[K
[4.927s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.927s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.928s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.928s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.928s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.929s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.929s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.929s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:67:39:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.930s]    67 |   node->declare_parameter("lidar_type"[01;35m[K)[m[K;
[4.931s]       |                                       [01;35m[K^[m[K
[4.931s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.931s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.931s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.931s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.931s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.931s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.931s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.932s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:72:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.932s]    72 |   node->declare_parameter("device_type"[01;35m[K)[m[K;
[4.932s]       |                                        [01;35m[K^[m[K
[4.932s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.932s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.932s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.932s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.932s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.933s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.933s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.933s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:77:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.933s]    77 |   node->declare_parameter("sample_rate"[01;35m[K)[m[K;
[4.933s]       |                                        [01;35m[K^[m[K
[4.933s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.933s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.934s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.935s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.935s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.935s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.936s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.936s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:82:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.936s]    82 |   node->declare_parameter("abnormal_check_count"[01;35m[K)[m[K;
[4.937s]       |                                                 [01;35m[K^[m[K
[4.937s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.937s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.937s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.938s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.938s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.938s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.938s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.938s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:90:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.939s]    90 |   node->declare_parameter("fixed_resolution"[01;35m[K)[m[K;
[4.939s]       |                                             [01;35m[K^[m[K
[4.939s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.939s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.939s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.939s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.939s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.939s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.940s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.940s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:95:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.940s]    95 |   node->declare_parameter("reversion"[01;35m[K)[m[K;
[4.940s]       |                                      [01;35m[K^[m[K
[4.940s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.940s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.940s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.941s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.941s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.941s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.941s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.941s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:100:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.941s]   100 |   node->declare_parameter("inverted"[01;35m[K)[m[K;
[4.941s]       |                                     [01;35m[K^[m[K
[4.941s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.941s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.942s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.942s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.942s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.942s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.943s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.943s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:104:43:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.943s]   104 |   node->declare_parameter("auto_reconnect"[01;35m[K)[m[K;
[4.943s]       |                                           [01;35m[K^[m[K
[4.943s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.943s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.943s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.943s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.944s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.944s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.944s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.944s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:109:44:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.944s]   109 |   node->declare_parameter("isSingleChannel"[01;35m[K)[m[K;
[4.944s]       |                                            [01;35m[K^[m[K
[4.944s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.944s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.945s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.945s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.945s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.945s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.945s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.945s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:114:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.945s]   114 |   node->declare_parameter("intensity"[01;35m[K)[m[K;
[4.945s]       |                                      [01;35m[K^[m[K
[4.946s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.946s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.946s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.947s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.947s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.947s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.947s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.947s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:119:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.947s]   119 |   node->declare_parameter("support_motor_dtr"[01;35m[K)[m[K;
[4.947s]       |                                              [01;35m[K^[m[K
[4.948s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.950s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.950s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.950s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.951s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.951s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.951s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.951s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:126:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.951s]   126 |   node->declare_parameter("angle_max"[01;35m[K)[m[K;
[4.951s]       |                                      [01;35m[K^[m[K
[4.952s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.952s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.952s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.952s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.952s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.953s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.953s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.953s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:130:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.953s]   130 |   node->declare_parameter("angle_min"[01;35m[K)[m[K;
[4.953s]       |                                      [01;35m[K^[m[K
[4.953s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.953s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.953s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.954s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.954s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.954s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.954s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.954s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:135:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.954s]   135 |   node->declare_parameter("range_max"[01;35m[K)[m[K;
[4.954s]       |                                      [01;35m[K^[m[K
[4.955s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.955s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.955s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.955s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.955s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.955s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.955s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.955s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:139:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.956s]   139 |   node->declare_parameter("range_min"[01;35m[K)[m[K;
[4.956s]       |                                      [01;35m[K^[m[K
[4.956s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.956s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.956s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.956s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.956s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.957s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.957s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.957s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:144:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.957s]   144 |   node->declare_parameter("frequency"[01;35m[K)[m[K;
[4.957s]       |                                      [01;35m[K^[m[K
[4.957s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.957s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.957s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.958s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.958s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.958s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.958s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.958s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:149:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.958s]   149 |   node->declare_parameter("invalid_range_is_inf"[01;35m[K)[m[K;
[4.958s]       |                                                 [01;35m[K^[m[K
[4.958s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.959s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.959s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.959s]                  from [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.959s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.959s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.959s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.959s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[4.959s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:165:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.960s]   165 |     [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[4.960s]       |              [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[4.960s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:166:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.960s]   166 |   [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[4.960s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[4.960s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:167:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.960s]   167 |   [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[4.961s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[4.961s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[4.961s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:175:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.961s]   175 |     [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[4.961s]       |              [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[4.964s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:176:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.964s]   176 |   [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[4.964s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[4.965s] [01m[K/home/jw/robot/ros_ws/src/ExaRobot_ROS2/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:177:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.965s]   177 |   [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[4.965s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[10.570s] [ 75%] [32m[1mLinking CXX executable ydlidar_ros2_driver_node[0m
[11.313s] [ 75%] Built target ydlidar_ros2_driver_node
[16.506s] [100%] [32m[1mLinking CXX executable ydlidar_ros2_driver_client[0m
[17.910s] [100%] Built target ydlidar_ros2_driver_client
[18.001s] Invoked command in '/home/jw/robot/ros_ws/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --build /home/jw/robot/ros_ws/build/ydlidar_ros2_driver -- -j12 -l12
[18.378s] Invoking command in '/home/jw/robot/ros_ws/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --install /home/jw/robot/ros_ws/build/ydlidar_ros2_driver
[18.430s] -- Install configuration: ""
[18.430s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_node
[18.433s] -- Set runtime path of "/home/jw/robot/ros_ws/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_node" to ""
[18.433s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_client
[18.446s] -- Set runtime path of "/home/jw/robot/ros_ws/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_client" to ""
[18.446s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch
[18.446s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar_launch_view.py
[18.446s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar_launch.py
[18.446s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar.py
[18.446s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/params
[18.447s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/params/ydlidar.yaml
[18.450s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/startup
[18.450s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/startup/initenv.sh
[18.454s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/config
[18.454s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/config/ydlidar.rviz
[18.455s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ament_index/resource_index/package_run_dependencies/ydlidar_ros2_driver
[18.455s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ament_index/resource_index/parent_prefix_path/ydlidar_ros2_driver
[18.455s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/ament_prefix_path.sh
[18.455s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/ament_prefix_path.dsv
[18.456s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/path.sh
[18.456s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/path.dsv
[18.456s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.bash
[18.456s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.sh
[18.456s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.zsh
[18.457s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.dsv
[18.457s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/package.dsv
[18.457s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ament_index/resource_index/packages/ydlidar_ros2_driver
[18.457s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/cmake/ydlidar_ros2_driverConfig.cmake
[18.458s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/cmake/ydlidar_ros2_driverConfig-version.cmake
[18.458s] -- Installing: /home/jw/robot/ros_ws/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/package.xml
[18.471s] Invoked command in '/home/jw/robot/ros_ws/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=/opt/ros/galactic /usr/bin/cmake --install /home/jw/robot/ros_ws/build/ydlidar_ros2_driver
